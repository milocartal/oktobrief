import { useSession } from "next-auth/react";
import type { InferGetServerSidePropsType, GetServerSideProps, NextPage } from "next";
import { getSession } from "next-auth/react";
import Head from "next/head";
import { IoChevronUpCircleSharp, IoChevronDownCircleSharp } from "react-icons/io5";
import { NavBar } from "~/components/barrel";
import { useState } from "react";
import { BiShowAlt, BiHide, BiGroup, BiCalendar, BiLeftArrowAlt } from "react-icons/bi";
import Image from "next/image";
import { prisma } from "~/server/db";
import type { UserWithPromo } from "~/utils/type";
import Link from "next/link";
import { api } from "~/utils/api";


export const getServerSideProps: GetServerSideProps<{ user: UserWithPromo }> = async function (context) {
    const session = await getSession(context)

    if (!session) {
        return {
            redirect: {
                destination: '/login',
                permanent: false,
            },
        }
    }

    const user = await prisma.user.findUnique({
        where: {
            id: session.user.id
        },
        include: {
            promos: {
                include: {
                    apprenants: true
                }
            }
        }
    })

    if (!user) {
        return {
            redirect: {
                destination: '/',
                permanent: false,
            },
        }
    }

    return {
        props: {
            user: JSON.parse(JSON.stringify(user)) as UserWithPromo
        }
    }
};

const AdminProfileScreen: NextPage<InferGetServerSidePropsType<typeof getServerSideProps>> = ({ user }) => {
    const [shown, setShown] = useState(false)

    const { data: sessionData } = useSession();
    const [open, setOpen] = useState(false)
    const userPFP = user ? user.image : undefined

    const updateUser = api.user.update.useMutation()
    const updatePassword = api.user.updatePassword.useMutation()

    let fullname = user.name

    if (user.firstName != null && user.name != null) {
        fullname = user.firstName + " " + user.name
    }

    async function handleUpdate(e: React.SyntheticEvent) {
        e.preventDefault()
        const target = e.target as typeof e.target & {
            userName: { value: string };
            userLastName: { value: string };
            userEmail: { value: string };
            currentPassword: { value: string };
            newPassword: { value: string };
        };
        const name = target.userLastName.value
        const fisrtname = target.userName.value
        const mail = target.userEmail.value
        const password = target.currentPassword.value
        const newPassword = target.newPassword.value
        await updateUser.mutateAsync({ id: user.id, name: name, firstname: fisrtname, mail: mail, url: user.image })
        if (password.length > 0) {
            if (password !== user.password) {
                alert("Le mot de passe n'est pas bon")
            }
            else {
                await updatePassword.mutateAsync({ id: user.id, password: newPassword })
            }
        }
        window.location.reload()
    }

    return (
        <>
            <Head>
                <title>{fullname}</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="flex min-h-screen flex-col items-start justify-start bg-[#F3F3F3] px-[10%] pt-[40px] ml-[100px]">

            <span className="flex w-full flex-row items-center justify-start mb-10 gap-5">
                    <Link href={"/"} className="px-5 py-2 bg-[#0e6073] hover:bg-[#0c4d5c] text-white rounded-lg flex items-center self-start justify-between gap-1"><BiLeftArrowAlt className="text-3xl" /> Retour</Link>
                    <h1 className="text-4xl font-extrabold text-black">Profil de {fullname}</h1>
                </span>

                <section className="flex w-full flex-col items-center justify-start bg-white rounded-lg px-[40px] py-[40px] mb-5 relative">
                    <h2 className="text-2xl text-black self-start mb-5">Mon compte</h2>
                    <div className="flex flex-row items-center justify-between w-[80%] self-start">
                        {userPFP && (userPFP.includes("http") ?
                            <Image width={300} height={300} loader={() => userPFP} src={userPFP} className="w-40 h-40 rounded-full object-cover mr-3" style={{ background: user.color }} alt="Photo de profil utilisateur" />
                            :
                            <div className="w-40 h-40 rounded-full mr-3 flex items-center justify-center" style={{ background: user.color }}>
                                <Image width={300} height={300} loader={() => userPFP} src={userPFP} className="w-10/12 h-10/12 object-fit " alt="Photo de profil utilisateur" />
                            </div>)
                        }
                        <div>
                            <h2 className="text-2xl text-black self-start">{fullname}</h2>
                            {user.formateur ? <p className="text-lg text-black self-start">Formateur.rice</p> : <p className="text-lg text-black self-start">Apprenant.e</p>}
                        </div>
                        <div>
                            <h2 className="text-2xl text-black self-start">Contact</h2>
                            <p className="text-lg text-black self-start">{user.email}</p>
                        </div>
                    </div>
                    {open ? <button onClick={() => setOpen(!open)}><IoChevronUpCircleSharp className="h-[60px] w-[60px] text-[#0E6073] absolute right-8 top-52" /></button> : <button onClick={() => setOpen(!open)}><IoChevronDownCircleSharp className="h-[60px] w-[60px] text-[#0E6073] absolute right-8 top-52" /></button>}
                    {open &&
                        <form onSubmit={(e) => void handleUpdate(e)} className="w-full mt-10 flex flex-row justify-around px-12" method="POST">
                            <fieldset className="w-[30%]">
                                <label className="mt-2">Prénom</label>
                                <input
                                    type='text'
                                    name="userName"
                                    id="userName"
                                    placeholder="Prénom"
                                    className="px-[1rem] py-3 w-full bg-transparent rounded-lg bg-white shadow-[inset_4px_4px_12px_4px_rgba(0,0,0,0.25)]"
                                    autoComplete="off"
                                    defaultValue={user.firstName ? user.firstName : ""}
                                    required
                                />
                                <label className="mt-2">Nom</label>
                                <input
                                    type='text'
                                    name="userLastName"
                                    id="userLastName"
                                    placeholder="Nom"
                                    className="px-[1rem] py-3 w-full bg-transparent rounded-lg bg-white shadow-[inset_4px_4px_12px_4px_rgba(0,0,0,0.25)]"
                                    autoComplete="off"
                                    defaultValue={user.name ? user.name : ""}
                                    required
                                />
                                <label className="mt-2">Email</label>
                                <input
                                    type='mail'
                                    name="userEmail"
                                    id="userEmail"
                                    placeholder="Adresse mail"
                                    className="px-[1rem] py-3 w-full bg-transparent rounded-lg bg-white shadow-[inset_4px_4px_12px_4px_rgba(0,0,0,0.25)]"
                                    autoComplete="off"
                                    defaultValue={user.email ? user.email : ""}
                                    required
                                />
                            </fieldset>
                            <fieldset className="w-[60%] flex flex-col items-end justify-between">
                                <div className="w-full flex flex-row items-center justify-end">
                                    {sessionData && sessionData.user && sessionData.user.image && userPFP && <Image width={200} height={200} loader={() => userPFP} src={userPFP} className="w-40 h-40 rounded-full object-cover mr-5" alt="Photo de profil utilisateur" />}
                                    <div>
                                        <label>Mot de passe actuel</label>
                                        <div className="rounded-lg bg-white shadow-[inset_4px_4px_12px_4px_rgba(0,0,0,0.25)] h-12 w-full flex flex-row justify-between items-center">
                                            <input
                                                type={shown ? "text" : "password"}
                                                name="currentPassword"
                                                id="currentPassword"
                                                className="px-[1rem] w-full bg-transparent h-full"
                                                autoComplete="off"
                                            />
                                            <div className="bg-[#0E6073] h-full w-20 flex flex-row justify-center items-center rounded-lg hover:cursor-pointer" onClick={() => setShown(!shown)}>
                                                {shown ? <BiHide className="text-3xl text-white" /> : <BiShowAlt className="text-3xl text-white" />}
                                            </div>
                                        </div>
                                        <label className="mt-2">Nouveau mot de passe</label>
                                        <div className="rounded-lg bg-white shadow-[inset_4px_4px_12px_4px_rgba(0,0,0,0.25)] h-12 w-full flex flex-row justify-between items-center">
                                            <input
                                                type={shown ? "text" : "password"}
                                                name="newPassword"
                                                id="newPassword"
                                                className="px-[1rem] w-full bg-transparent h-full"
                                                autoComplete="off"
                                                minLength={8}
                                            />
                                            <div className="bg-[#0E6073] h-full w-20 flex flex-row justify-center items-center rounded-lg hover:cursor-pointer" onClick={() => setShown(!shown)}>
                                                {shown ? <BiHide className="text-3xl text-white" /> : <BiShowAlt className="text-3xl text-white" />}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <span>
                                    <button className="px-5 py-3 text-[#A10000] text-base">Annuler</button>
                                    <button type="submit" className="px-5 py-3 bg-[#2EA3A5] hover:bg-[#288F90] text-white rounded-lg text-base">Enregistrer</button>
                                </span>
                            </fieldset>
                        </form>
                    }
                </section>


                <span className="flex w-full flex-row items-center justify-between mb-10 mt-10">
                    <h1 className="text-4xl font-extrabold text-black">Liste des promos de {fullname}</h1>
                </span>
                {user && user.promos && user.promos.map((item) => {
                    let img = "/logo-gradient.jpg"
                    if (item.image !== "") {
                        img = item.image
                    }
                    let desc = item.description
                    if (item.description.length > 150) {
                        desc = item.description.slice(0, 150) + "..."
                    }
                    return (
                        <Link href={`/superadmin/promo/${item.id}`} className="flex w-full items-center justify-start bg-white rounded-xl px-[40px] py-[40px] mb-5" key={item.id}>
                            <Image width={500} height={500} loader={() => img} src={img} className="w-[55%] h-[300px] bg-center bg-cover object-cover mr-5 " alt="Image de la promo sélectionnée" />
                            <div className="w-[45%]">
                                <h3 className="text-xl text-black mb-2">{item.title}</h3>
                                <div className="text-sm mb-5" dangerouslySetInnerHTML={{ __html: desc }} />
                                <span className="flex w-full flex-row items-center justify-between">
                                    <span className="flex w-full flex-row items-center">
                                        <BiGroup className="text-4xl text-[#0E6073] mr-1" />
                                        <p>{item.apprenants.length} apprenants</p>
                                    </span>
                                    <span className="flex w-full flex-row items-center">
                                        <BiCalendar className="text-4xl text-[#0E6073] mr-1" />
                                        <p>Du {item.starting.toString().slice(0, 10).replaceAll('-', '/')} au {item.ending.toString().slice(0, 10).replaceAll('-', '/')}</p>
                                    </span>
                                </span>
                            </div>
                        </Link>
                    )
                })}

                <NavBar />
            </main>
        </>
    );
};

export default AdminProfileScreen;