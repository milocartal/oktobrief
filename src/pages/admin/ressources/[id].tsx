
import type { InferGetServerSidePropsType, GetServerSideProps, NextPage } from "next";
import { getSession } from "next-auth/react";
import Head from "next/head";

import { NavBar, Notifs } from "~/components/barrel";
import { BiLeftArrowAlt, BiSearch } from "react-icons/bi";

import Link from "next/link";
import { useState } from "react";
import { prisma } from "~/server/db";
import type { CategFull } from "~/utils/type";
import type { Ressource, Tag } from "@prisma/client";
import { api } from "~/utils/api";

export const getServerSideProps: GetServerSideProps<{
    ressource: Ressource,
    categories: CategFull[]
}> = async function (context) {
    const session = await getSession(context)
    const superadmin = session?.superadmin
    const formateur = session?.formateur

    if (!session) {
        return {
            redirect: {
                destination: '/login',
                permanent: false,
            },
        }
    }

    if (!superadmin || !formateur) {
        return {
            redirect: {
                destination: '/',
                permanent: false,
            },
        }
    }

    const ressource = await prisma.ressource.findUnique({
        where: {
            id: context.query.id as string
        },
        include: {
            briefs: true
        }
    })

    const categories = await prisma.categorie.findMany({
        include: {
            tags: true
        }
    })

    return {
        props: {
            ressource: JSON.parse(JSON.stringify(ressource)) as Ressource,
            categories: JSON.parse(JSON.stringify(categories)) as CategFull[],
        }
    }
};

const ModifRessource: NextPage<InferGetServerSidePropsType<typeof getServerSideProps>> = ({ ressource, categories }) => {
    const updateRes = api.ressource.update.useMutation()

    //useState

    const [selectedCat, setSelectedCat] = useState<CategFull | null>(() => {
        if (categories.length > 0 && categories[0]) {
            return categories[0]
        }
        return null
    })

    const [selectedTags, setSelectedTags] = useState<Tag | null>(null)
    const [SearchTerm, setSearchTerm] = useState('');

    //Fonctions

    const handleSearchTerm = (e: React.ChangeEvent<HTMLInputElement>) => {
        const value = e.target.value;
        setSearchTerm(value);
    };

    async function handleUpdateRes(e: React.SyntheticEvent) {
        e.preventDefault()
        const target = e.target as typeof e.target & {
            ressourceTitle: { value: string };
            imgRessource: { value: string };
            ressourceUrl: { value: string };
        };
        const title = target.ressourceTitle.value
        let img = "/logo-gradient.jpg"
        if (target.imgRessource.value !== "") {
            img = target.imgRessource.value
        }
        const link = target.ressourceUrl.value
        await updateRes.mutateAsync({ id: ressource.id, title: title, link: link, img: img })
        window.location.reload()
    }

    return (
        <>
            <Head>
                <title>Modifier ressource</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className="flex h-screen flex-col items-center justify-center bg-[#F3F3F3] px-[50px] gap-5">

                <Notifs />
                <NavBar />
                
                <form onSubmit={(e) => void handleUpdateRes(e)} className="relative flex flex-col gap-5 item-center justify-between bg-white rounded-lg p-10 w-10/12 max-h-[95%] text-[#041f25]" method="POST">
                    <span className="flex flex-row justify-between">
                        <span className="flex flex-row justify-between items-center">
                            <Link href={`/briefs`} className="px-5 py-2 bg-[#0E6073] hover:bg-[#0c4d5c] text-white rounded-lg text-base self-start z-10 flex flex-row items-center justify-between w-32 mr-5"><BiLeftArrowAlt className="text-3xl" /> Retour</Link>
                            <h1 className="text-3xl text-black">Modifier la ressource</h1>
                        </span>
                        <p className="text-base text-[#A10000]">*Obligatoire</p>
                    </span>
                    <div className="w-full h-full max-h-[50%] flex flex-row justify-between items-start">
                        <fieldset className="w-[38%]">
                            <fieldset>
                                <label htmlFor='ressourceTitle'>Titre de la ressource <span className="text-[#A10000] text-1xl">*</span></label>
                                <input
                                    type='text'
                                    name="ressourceTitle"
                                    id="ressourceTitle"
                                    className="p-[1rem] rounded-lg bg-none shadow-[inset_4px_5px_12px_6px_rgba(0,0,0,0.25)] w-full mb-3"
                                    defaultValue={ressource.title}
                                    autoComplete="off" />
                            </fieldset>
                            <fieldset>
                                <label htmlFor='imgRessource'>Image de la ressource</label>
                                <input
                                    type="text"
                                    name="imgRessource"
                                    id="imgRessource"
                                    className="px-[1rem] py-3 w-full rounded-lg shadow-[inset_4px_4px_12px_4px_rgba(0,0,0,0.25)]"
                                    defaultValue={ressource.img}
                                    autoComplete="off" />
                            </fieldset>
                        </fieldset>

                        <div className="w-[60%] h-full">
                            <fieldset>
                                <label htmlFor='ressourceUrl'>URL de la ressource <span className="text-[#A10000] text-1xl">*</span></label>
                                <input
                                    type='url'
                                    name="ressourceUrl"
                                    id="ressourceUrl"
                                    className="p-[1rem] rounded-lg bg-none shadow-[inset_4px_5px_12px_6px_rgba(0,0,0,0.25)] w-full mb-3"
                                    defaultValue={ressource.link}
                                    autoComplete="off" />
                            </fieldset>
                            <p>Tags</p>

                            <div className="w-full flex flex-row justify-between min-h-[300px] h-full bg-white shadow-[0px_4px_4px_0px_rgba(0,0,0,0.25)] rounded-lg">
                                <div className="w-[40%] h-full max-h-[300px] bg-white shadow-[4px_0px_10px_0px_rgba(0,0,0,0.25)] rounded-l-lg flex flex-col items-start py-5 overflow-auto">
                                    <div className="pr-5 rounded-full bg-white shadow-[inset_4px_4px_12px_4px_rgba(0,0,0,0.25)] w-[80%] flex flex-row justify-between items-center self-center mr-2 mb-3">
                                        <BiSearch className="text-3xl text-black ml-4" />
                                        <input
                                            type='text'
                                            name="searchProject"
                                            className="pr-[1rem] pl-1 py-2 w-full bg-transparent"
                                            autoComplete="off"
                                            onChange={handleSearchTerm}
                                        />
                                    </div>
                                    {categories.filter((cat) => {
                                        return cat.name.toLowerCase().includes(SearchTerm.toLowerCase())
                                    }).map((item) => {
                                        return (
                                            <>
                                                {selectedCat === item ?
                                                    <button type="button" className="w-full py-2 px-5 text-start flex flex-row justify-between bg-[#2EA3A5] text-white" key={item.id} onClick={() => setSelectedCat(item)}>
                                                        <p>{item.name}</p>
                                                        <p>({item.tags.length})</p>
                                                    </button>
                                                    :
                                                    <button type="button" className="w-full py-2 px-5 text-start flex flex-row justify-between" key={item.id} onClick={() => setSelectedCat(item)}>
                                                        <p>{item.name}</p>
                                                        <p>({item.tags.length})</p>
                                                    </button>
                                                }
                                            </>
                                        )
                                    })}
                                </div>
                                <div className="w-[66%] h-full p-3 flex flex-row flex-wrap">
                                    {selectedCat?.tags.map((item) => {
                                        return (
                                            <>
                                                {selectedTags === item ?
                                                    <button type="button" className="py-2 px-5 mr-2 my-1 text-start rounded-full bg-[#2EA3A5] text-white" key={item.id}>{item.name}</button>
                                                    :
                                                    <button type="button" className="py-2 px-5 mr-2 my-1 text-start rounded-full bg-[#F0F0F0]" key={item.id}>{item.name}</button>
                                                }
                                            </>
                                        )
                                    })}
                                </div>
                            </div>
                        </div>
                    </div>
                    <span className="self-end flex items-center mt-32">
                        <div className="text-[#A10000] hover:cursor-pointer">Annuler</div>
                        <button type="submit" className="bg-[#2EA3A5] hover:bg-[#288F90] text-white py-4 px-7 rounded-lg ml-10">Enregistrer</button>
                    </span>
                </form>
            </main>
        </>
    );
};

export default ModifRessource;