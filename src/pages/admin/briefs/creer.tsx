import { type GetServerSideProps, type NextPage } from "next";
import { getSession, useSession } from "next-auth/react";
import Head from "next/head";

import { type Session as SessionAuth } from 'next-auth'

import { NavBar } from "~/components/barrel";
import dynamic from "next/dynamic";
import { useState } from "react";
import { api } from "~/utils/api";
import Router from "next/router";

const QuillNoSSRWrapper = dynamic(import('react-quill'), {
    ssr: false,
    loading: () => <p>Loading ...</p>,
})

const modules = {
    toolbar: [
        [{ header: ['1', '2', '3', false] }],
        //[{ size: [] }],
        ['bold', 'italic', 'underline', 'strike', 'blockquote', 'code'],
        [{ color: [] }],
        [
            { list: 'ordered' },
            { list: 'bullet' },
        ],
        ['link'],
    ],
    clipboard: {
        // toggle to add extra line breaks when pasting HTML:
        matchVisual: false,
    },
}


export const getServerSideProps: GetServerSideProps<{
    session: SessionAuth
}> = async function (context) {
    const session = await getSession(context)

    if (!session) {
        return {
            redirect: {
                destination: '/login',
                permanent: false,
            },
        }
    }

    return {
        props: { session }
    }
};

const AddBrief: NextPage = () => {

    const { data: sessionData } = useSession()
    const idRef = sessionData?.promo.referentiel.id

    const createBrief = api.brief.create.useMutation()

    const [desc, setDesc] = useState("")
    const [contexte, setContexte] = useState("")
    const [modaPeda, setPeda] = useState("")
    const [evals, setEvals] = useState("")
    const [livrable, setLivrable] = useState("")
    const [perf, setPerf] = useState("")

    async function handleCrea(e: React.SyntheticEvent) {
        e.preventDefault()
        const target = e.target as typeof e.target & {
            briefTitle: { value: string };
            briefImg: { value: string };
        };
        const title = target.briefTitle.value
        const url = target.briefImg.value
        if (desc !== "" && contexte !== "" && modaPeda !== "" && evals !== "" && livrable !== "") {
            if (idRef) {
                const temp = await createBrief.mutateAsync({ title: title, desc: desc, contexte: contexte, livrable: livrable, perf: perf, idRef: idRef, eval: evals, peda: modaPeda, idForma: sessionData.user.id, img: url })
                await Router.push(`/admin/briefs/${temp.id}`)
            }
        }
        else {
            alert("Merci de remplir tous les champs requis")
        }
    }

    return (
        <>
            <Head>
                <title>Gestion de OktoBrief</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="flex min-h-screen flex-col items-center justify-start bg-[#F3F3F3] pl-[150px] px-[50px] pt-10 gap-5">

                <h1 className="text-4xl font-extrabold text-black w-full">Créer un projet : Description générel</h1>

                <section className="flex w-full flex-col items-center justify-start bg-white px-[40px] py-[40px] gap-5 rounded-xl mb-10">

                    <form onSubmit={(e) => void handleCrea(e)} className="flex w-full flex-col items-center justify-start gap-5" method="POST">
                        <fieldset className="w-full flex flex-col gap-2">
                            <label htmlFor="briefTitle" className="text-2xl text-black w-full">Titre du projet<span className="text-[#A10000]">*</span></label>
                            <input
                                type='text'
                                name="briefTitle"
                                id="briefTitle"
                                className="px-[1rem] py-3 rounded-xl bg-white shadow-[inset_0px_2px_9px_4px_rgba(0,0,0,0.25)] w-full"
                                autoComplete="off"
                                placeholder="Titre du projet"
                                required
                            />
                        </fieldset>

                        <fieldset className="w-full flex flex-col gap-2">
                            <label htmlFor="briefImg" className="text-2xl text-black w-full">Image du projet</label>
                            <input
                                type='url'
                                name="briefImg"
                                id="briefImg"
                                className="px-[1rem] py-3 rounded-xl bg-white shadow-[inset_0px_2px_9px_4px_rgba(0,0,0,0.25)] w-full"
                                autoComplete="off"
                                placeholder="Titre du projet"
                            />
                        </fieldset>

                        <fieldset className="w-full flex flex-col gap-2">
                            <h2 className="text-2xl text-black w-full">Description rapide<span className="text-[#A10000]">*</span></h2>
                            <QuillNoSSRWrapper
                                theme="snow"
                                placeholder="Description"
                                className="pb-11 bg-white w-full h-[250px]"
                                modules={modules}
                                onChange={(e) => { setDesc(e) }}
                            />
                        </fieldset>

                        <fieldset className="w-full flex flex-col gap-2">
                            <h2 className="text-2xl text-black w-full">Contexte<span className="text-[#A10000]">*</span></h2>
                            <QuillNoSSRWrapper
                                theme="snow"
                                placeholder="Contexte"
                                className="pb-11 bg-white w-full h-[250px]"
                                modules={modules}
                                onChange={(e) => { setContexte(e) }}
                            />
                        </fieldset>

                        <fieldset className="w-full flex flex-col gap-2">
                            <h2 className="text-2xl text-black w-full">Modalités pédagogiques<span className="text-[#A10000]">*</span></h2>
                            <QuillNoSSRWrapper
                                theme="snow"
                                placeholder="Modalités pédagogiques"
                                className="pb-11 bg-white w-full h-[250px]"
                                modules={modules}
                                onChange={(e) => { setPeda(e) }}
                            />
                        </fieldset>

                        <fieldset className="w-full flex flex-col gap-2">
                            <h2 className="text-2xl text-black w-full">Modalités d&apos;évaluation<span className="text-[#A10000]">*</span></h2>
                            <QuillNoSSRWrapper
                                theme="snow"
                                placeholder="Modalités d'évaluation"
                                className="pb-11 bg-white w-full h-[250px]"
                                modules={modules}
                                onChange={(e) => { setEvals(e) }}
                            />
                        </fieldset>

                        <fieldset className="w-full flex flex-col gap-2">
                            <h2 className="text-2xl text-black w-full">Livrable(s) attendu(s)<span className="text-[#A10000]">*</span></h2>
                            <QuillNoSSRWrapper
                                theme="snow"
                                placeholder="Livrable(s)"
                                className="pb-11 bg-white w-full h-[250px]"
                                modules={modules}
                                onChange={(e) => { setLivrable(e) }}
                            />
                        </fieldset>

                        <fieldset className="w-full flex flex-col gap-2">
                            <h2 className="text-2xl text-black w-full">Critères de performance</h2>
                            <QuillNoSSRWrapper
                                theme="snow"
                                placeholder="Critères de performance"
                                className="pb-11 bg-white w-full h-[250px]"
                                modules={modules}
                                onChange={(e) => { setPerf(e) }}
                            />
                        </fieldset>


                        <button type="submit" className="flex flex-row items-center justify-between px-5 py-3 bg-[#2EA3A5] hover:bg-[#288F90] text-white rounded-lg text-lg">
                            Ajouter les compétences
                        </button>

                    </form>

                </section>



                <NavBar />
            </main>
        </>
    );
};

export default AddBrief;