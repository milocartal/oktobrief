import type { InferGetServerSidePropsType, GetServerSideProps, NextPage } from "next";
import { getSession } from "next-auth/react";
import Head from "next/head";

import { NavBar } from "~/components/barrel";
import { BiCheck, BiLeftArrowAlt, BiRightArrowAlt, BiSearch } from "react-icons/bi";
import Link from "next/link";
import { IoChevronDownCircle, IoChevronUpCircle } from "react-icons/io5";
import { useState } from "react";
import Image from "next/image";
import { prisma } from "~/server/db";
import { PromoWithAll } from "~/utils/type";
import { User } from "@prisma/client";
import { aleatoirePP } from "~/utils/genertor";


export const getServerSideProps: GetServerSideProps<{
    promos: PromoWithAll[];
    users: User[]
}> = async function (context) {
    const session = await getSession(context)
    const superadmin = session?.superadmin
    const formateur = session?.formateur


    if (!session) {
        return {
            redirect: {
                destination: '/login',
                permanent: false,
            },
        }
    }

    if (!superadmin || !formateur) {
        return {
            redirect: {
                destination: '/',
                permanent: false,
            },
        }
    }

    const promos = await prisma.promo.findMany({
        include: {
            apprenants: true,
            referentiel: true
        }
    })

    const users = await prisma.user.findMany()

    return {
        props: {
            promos: JSON.parse(JSON.stringify(promos)) as PromoWithAll[],
            users: JSON.parse(JSON.stringify(users)) as User[],
        }
    }
};

const AssignBrief: NextPage<InferGetServerSidePropsType<typeof getServerSideProps>> = ({ promos, users }) => {
    const [selected, setSelected] = useState<User>()
    const [open, setOpen] = useState<PromoWithAll>()
    const [isToggled, setIsToggled] = useState(false);

    return (
        <>
            <Head>
                <title>OktoBrief</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className="h-screen w-screen bg-[#F3F3F3] pl-[120px] flex flex-col items-start justify-between">
                <div className="w-full h-[85%] flex flex-row justify-between mt-5">
                    <section className="h-full w-[74%] rounded-lg bg-white overflow-auto px-5 py-5">
                        <div className="w-full flex flex-row justify-between items-center">
                            <Link href={""} className="px-5 py-2 bg-[#0e6073] hover:bg-[#0c4d5c] text-white rounded-lg text-base self-start flex flex-row items-center justify-between w-32"><BiLeftArrowAlt className="text-3xl" /> Retour</Link>
                            <div className="flex flex-row justify-between items-center">
                                <div className="pr-[1rem] rounded-full bg-white shadow-[inset_4px_4px_12px_4px_rgba(0,0,0,0.25)] w-[50%] flex flex-row justify-between items-center mr-2">
                                    <BiSearch className="text-3xl text-black ml-4" />
                                    <input
                                        type='text'
                                        name="promoDateStart"
                                        className="pr-[1rem] pl-1 py-3 w-full bg-transparent"
                                        autoComplete="off"
                                    />
                                </div>
                                <label className="relative inline-block w-[250px] cursor-pointer rounded-full bg-[#ECECEC] h-[40px] z-20" id="switchlabel">
                                    <div className="flex flex-row items-center justify-between w-full h-full pr-3 pl-10 absolute z-20">
                                        <p className={`text-sm mr-2 ${isToggled ? "" : "text-white"}`}>Promos</p>
                                        <p className={`text-sm mr-2 ${isToggled ? "text-white" : ""}`}>Apprenants</p>
                                    </div>
                                    <input type="checkbox" className="hidden transform-[translateX(50px)]" checked={isToggled} onChange={() => setIsToggled(!isToggled)} id="switchinput" />

                                    <span className="absolute top-0 left-0 bottom-0 right-0 before:absolute before:content-[''] before:h-[37px] before:w-[122px] before:bg-[#0E6073] before:rounded-full before:top-[2px] before:left-[2px] before:transition-[transform] before:duration-[0.4s] before:ease before: z-10" id="switchspan">
                                    </span>
                                </label>
                            </div>
                        </div>
                        {isToggled ?
                            <div className="flex flex-row items-start justify-start flex-wrap mt-5">
                                {users.map((item) => {
                                    let pp = aleatoirePP();
                                    if (item.image) {
                                        pp = item.image
                                    }
                                    return (
                                        <>
                                            <div className={`flex flex-col w-[32%] max-w-[500px] rounded-lg shadow-[0px_4px_4px_0px_rgba(0,0,0,0.25)] my-2 mx-1 ${item === selected ? "border-4 border-[#0E6073]" : ""} relative`} key={item.id}>

                                                <button
                                                    className={`h-[40px] w-[40px] rounded-full absolute top-3 right-3 ${item === selected ? "shadow-[0px_4px_4px_0px_rgba(0,0,0,0.25)] bg-[#0E6073] flex flex-row justify-center items-center" : "shadow-[inset_0px_4px_4px_0px_rgba(0,0,0,0.25)] bg-white"}`}
                                                    onClick={() => {
                                                        if (selected === item) {
                                                            setSelected(undefined)
                                                        }
                                                        else {
                                                            setSelected(item)
                                                        }
                                                    }}
                                                >
                                                    <BiCheck className="text-white text-3xl" />
                                                </button>

                                                <div className="w-full p-3 flex flex-row justify-between items-center">
                                                    <div className="flex flex-row justify-start items-center">
                                                        {pp.includes("http") ?
                                                            <Image width={300} height={300} loader={() => pp} src={pp} className="w-12 h-12 rounded-full object-cover mr-3" style={{ background: item.color }} alt="Photo de profil utilisateur" />
                                                            :
                                                            <div className="w-12 h-12 rounded-full mr-3 flex items-center justify-center" style={{ background: item.color }}>
                                                                <Image width={300} height={300} loader={() => pp} src={pp} className="w-10/12 h-10/12 object-fit " alt="Photo de profil utilisateur" />
                                                            </div>
                                                        }
                                                        <p>{item.firstName} {item.name}</p>
                                                    </div>
                                                </div>

                                            </div>
                                        </>
                                    )
                                })}

                            </div>
                            :
                            <div className="flex flex-row items-start justify-start flex-wrap mt-5">
                                {promos.map((item) => {

                                    let promoImg = "/promo.jpeg";
                                    if (item.image) {
                                        promoImg = item.image
                                    }
                                    return (
                                        <div className={`flex flex-col w-[32%] max-w-[500px] rounded-lg shadow-[0px_4px_4px_0px_rgba(0,0,0,0.25)] my-2 mx-1 relative ${item === open ? "h-[520px]" : "h-[260px]"}`} key={item.id}>
                                            <Image width={400} height={400} loader={() => promoImg} src={promoImg} className="w-[100%] h-[175px] object-cover mr-5 rounded-t-lg" alt="Image de la promo sélectionnée" />
                                            <button className=" h-[40px] w-[40px] rounded-full shadow-[inset_0px_4px_4px_0px_rgba(0,0,0,0.25)] bg-white absolute top-3 right-3"></button>
                                            <div className="w-full p-3 flex flex-row justify-between items-center">
                                                <p>{item.title}</p>
                                                {item === open ?
                                                    <button onClick={() => setOpen(undefined)}>
                                                        <IoChevronUpCircle className="h-[40px] w-[40px] text-[#0E6073]" />
                                                    </button>
                                                    :
                                                    <button onClick={() => setOpen(item)}>
                                                        <IoChevronDownCircle className="h-[40px] w-[40px] text-[#0E6073]" />
                                                    </button>
                                                }

                                            </div>
                                        </div>
                                    )
                                })}
                            </div>
                        }
                    </section>
                    <section className="h-full w-[25%] bg-white rounded-lg overflow-auto flex flex-col items-center px-5 py-5">
                        <div className="pr-[1rem] rounded-full bg-white shadow-[inset_4px_4px_12px_4px_rgba(0,0,0,0.25)] w-[70%] flex flex-row justify-between items-center mr-2">
                            <BiSearch className="text-3xl text-black ml-4" />
                            <input
                                type='text'
                                name="promoDateStart"
                                className="pr-[1rem] pl-1 py-3 w-full bg-transparent"
                                autoComplete="off"
                            />
                        </div>
                        {users.map((item) => {
                            let pp = aleatoirePP();
                            if (item.image) {
                                pp = item.image
                            }

                            return (
                                <span className="flex flex-row justify-between items-center w-full mt-5" key={item.id}>
                                    <div className="flex flex-row items-center">
                                        {<button className="flex flex-row items-center justify-center w-6 h-6 bg-[#D9D9D9] rounded-full mr-5">
                                            <p className="text-[#0E6073]">-</p>
                                        </button>}
                                        {pp.includes("http") ?
                                            <Image width={300} height={300} loader={() => pp} src={pp} className="w-12 h-12 rounded-full object-cover mr-3" style={{ background: item.color }} alt="Photo de profil utilisateur" />
                                            :
                                            <div className="w-12 h-12 rounded-full mr-3 flex items-center justify-center" style={{ background: item.color }}>
                                                <Image width={300} height={300} loader={() => pp} src={pp} className="w-10/12 h-10/12 object-fit " alt="Photo de profil utilisateur" />
                                            </div>
                                        }
                                        <p className="text-base text-black font-semibold">{item.firstName} {item.name}</p>
                                    </div>
                                </span>
                            )
                        })}
                    </section>
                </div>
                <div className="w-full h-[10%] flex flex-row justify-end px-20">
                    <Link href={""} className="px-5 py-2 bg-[#0e6073] hover:bg-[#0b4d5c] text-white rounded-lg text-base self-start flex flex-row items-center justify-between w-fit">Valider la sélection <BiRightArrowAlt className="text-3xl" /></Link>
                </div>
                <NavBar />
            </main>
        </>
    );
};

export default AssignBrief;