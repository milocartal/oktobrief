import { type GetServerSideProps, type NextPage } from "next";
import { getSession } from "next-auth/react";
import Head from "next/head";

import { type Session as SessionAuth } from 'next-auth'

import { NavBar } from "~/components/barrel";
import { BiCheck, BiLeftArrowAlt, BiRightArrowAlt, BiSearch } from "react-icons/bi";
import Link from "next/link";
import { IoChevronDownCircle, IoChevronUpCircle } from "react-icons/io5";
import { useState } from "react";
import Image from "next/image";


export const getServerSideProps: GetServerSideProps<{
    session: SessionAuth
}> = async function (context) {
    const session = await getSession(context)

    if (!session) {
        return {
            redirect: {
                destination: '/login',
                permanent: false,
            },
        }
    }

    return {
        props: { session }
    }
};

const AssignBrief: NextPage = () => {
    const [selected, setSelected] = useState(0)
    const [open, setOpen] = useState(0)
    const [isToggled, setIsToggled] = useState(false);

    const PROMOS = [
        {
            "id": 1,
            "nom": "Promo 1 2022/2023",
            "etudiants" : [
                {
                    "id": 1,
                    "nom" : "Lorem Ipsum"
                },
                {
                    "id": 2,
                    "nom" : "Lorem Ipsum"
                },
                {
                    "id": 3,
                    "nom" : "Lorem Ipsum"
                },
                {
                    "id": 4,
                    "nom" : "Lorem Ipsum"
                }
            ]
        },
        {
            "id": 2,
            "nom": "Promo 1 2022/2023"
        },
        {
            "id": 3,
            "nom": "Promo 1 2022/2023"
        },
        {
            "id": 4,
            "nom": "Promo 1 2022/2023"
        },
        {
            "id": 5,
            "nom": "Promo 1 2022/2023"
        },
        {
            "id": 6,
            "nom": "Promo 1 2022/2023"
        },
        {
            "id": 7,
            "nom": "Promo 1 2022/2023"
        },
        {
            "id": 8,
            "nom": "Promo 1 2022/2023"
        },
    ]
    const DATA = [
        {
            "id": 1,
            "nom": "Lorem Ipsum",
            "email": "loremipsum@mail.com"
        },
        {
            "id": 2,
            "nom": "Lorem Ipsum",
            "email": "loremipsum@mail.com"
        },
        {
            "id": 3,
            "nom": "Lorem Ipsum",
            "email": "loremipsum@mail.com"
        },
        {
            "id": 4,
            "nom": "Lorem Ipsum",
            "email": "loremipsum@mail.com"
        },
        {
            "id": 5,
            "nom": "Lorem Ipsum",
            "email": "loremipsum@mail.com"
        },
        {
            "id": 6,
            "nom": "Lorem Ipsum",
            "email": "loremipsum@mail.com"
        },
        {
            "id": 7,
            "nom": "Lorem Ipsum",
            "email": "loremipsum@mail.com"
        },
        {
            "id": 8,
            "nom": "Lorem Ipsum",
            "email": "loremipsum@mail.com"
        },
        {
            "id": 9,
            "nom": "Lorem Ipsum",
            "email": "loremipsum@mail.com"
        },
        {
            "id": 10,
            "nom": "Lorem Ipsum",
            "email": "loremipsum@mail.com"
        },
        {
            "id": 11,
            "nom": "Lorem Ipsum",
            "email": "loremipsum@mail.com"
        }
    ]

    // const options = ;

    // const initialSelectedIndex = options.findIndex(({value}) => value === "bar");

    return (
        <>
      <Head>
        <title>OktoBrief</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="h-screen w-screen bg-[#F3F3F3] pl-[120px] flex flex-col items-start justify-between">
        <div className="w-full h-[85%] flex flex-row justify-between">
            <section className="h-full w-[74%] rounded-lg bg-white overflow-auto px-5 py-5">
                <div className="w-full flex flex-row justify-between items-center">
                    <Link href={""} className="px-5 py-2 bg-[#0e6073] hover:bg-[#0b4d5c] text-white rounded-lg text-base self-start flex flex-row items-center justify-between w-32"><BiLeftArrowAlt className="text-3xl" /> Retour</Link>
                    <div className="flex flex-row justify-between items-center">
                        <div className="pr-[1rem] rounded-full bg-white shadow-[inset_4px_4px_12px_4px_rgba(0,0,0,0.25)] w-[50%] flex flex-row justify-between items-center mr-2">
                            <BiSearch className="text-3xl text-black ml-4" />
                            <input
                                type='text'
                                name="promoDateStart"
                                className="pr-[1rem] pl-1 py-3 w-full bg-transparent"
                                autoComplete="off"
                            />
                        </div>
                        <label className="relative inline-block w-[250px] cursor-pointer rounded-full bg-[#ECECEC] h-[40px] z-20" id="switchlabel">
                                <div className="flex flex-row items-center justify-between w-full h-full pr-3 pl-10 absolute z-20">
                                    {isToggled ?
                                    <><p className="text-sm mr-2">Promos</p><p className="text-sm mr-2 text-white">Apprenants</p></>
                                    :
                                    <><p className="text-sm mr-2 text-white">Promos</p><p className="text-sm mr-2">Apprenants</p></>
                                    }
                                    
                                </div>
                                <input type="checkbox" className="hidden transform-[translateX(50px)]" checked={isToggled} onChange={() => setIsToggled(!isToggled)} id="switchinput"/>

                                <span className="absolute top-0 left-0 bottom-0 right-0 before:absolute before:content-[''] before:h-[37px] before:w-[122px] before:bg-[#0E6073] before:rounded-full before:top-[2px] before:left-[2px] before:transition-[transform] before:duration-[0.4s] before:ease before: z-10" id="switchspan">
                            </span>
                        </label>
                    </div>
                </div>
                {isToggled ? 
                <div className="flex flex-row items-start justify-start flex-wrap mt-5">
                    {DATA.map((item) => {
                        return (
                            <>
                                {item.id == selected ?
                                    <div className="flex flex-col w-[32%] max-w-[500px] rounded-lg shadow-[0px_4px_4px_0px_rgba(0,0,0,0.25)] my-2 mx-1 border-4 border-[#0E6073] relative" key={item.id}>
                                        <button className=" h-[40px] w-[40px] rounded-full shadow-[0px_4px_4px_0px_rgba(0,0,0,0.25)] bg-[#0E6073] absolute top-3 right-3 flex flex-row justify-center items-center" onClick={() => setSelected(0)}>
                                            <BiCheck className="text-white text-3xl"/>
                                        </button>
                                        <div className="w-full p-3 flex flex-row justify-between items-center">
                                            <div className="flex flex-row justify-start items-center">
                                            <Image width={200} height={200} src="/userPFP.png" className="w-12 h-12 rounded-full object-cover mr-3" alt="Photo de profil utilisateur"/>
                                            <p>{item.nom}</p>
                                            </div>
                                        </div>
                                    </div>
                                :
                                <div className="flex flex-col w-[32%] max-w-[500px] rounded-lg shadow-[0px_4px_4px_0px_rgba(0,0,0,0.25)] my-2 mx-1 relative" key={item.id}>
                                        <button className=" h-[40px] w-[40px] rounded-full shadow-[inset_0px_4px_4px_0px_rgba(0,0,0,0.25)] bg-white absolute top-3 right-3" onClick={() => setSelected(item.id)}></button>
                                        <div className="w-full p-3 flex flex-row justify-between items-center">
                                            <div className="flex flex-row justify-start items-center">
                                                <Image width={200} height={200} src="/userPFP.png" className="w-12 h-12 rounded-full object-cover mr-3" alt="Photo de profil utilisateur"/>
                                                <p>{item.nom}</p>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </>
                        )
                    })}
                   
                </div>
                :
                <div className="flex flex-row items-start justify-start flex-wrap mt-5">
                    {PROMOS.map((item) => {
                        return (
                            <>
                            {item.id == selected && item.id == open ?
                                <div className="flex flex-col w-[32%] max-w-[500px] rounded-lg h-[520px] shadow-[0px_4px_4px_0px_rgba(0,0,0,0.25)] my-2 mx-1 border-4 border-[#0E6073] relative" key={item.id}>
                                    <Image width={400} height={400} src="/promo.jpeg" className="w-[100%] max-h-[200px] bg-center bg-cover mr-5" alt="Image de la promo sélectionnée" />
                                    <button className=" h-[40px] w-[40px] rounded-full shadow-[0px_4px_4px_0px_rgba(0,0,0,0.25)] bg-[#0E6073] absolute top-3 right-3 flex flex-row justify-center items-center" onClick={() => setSelected(0)}>
                                        <BiCheck className="text-white text-3xl"/>
                                    </button>
                                    <div className="w-full p-3 flex flex-row justify-between items-center">
                                        <p>{item.nom}</p>
                                        <button onClick={() => setOpen(item.id)}>
                                            <IoChevronDownCircle className="h-[40px] w-[40px] text-[#0E6073]" />
                                        </button>
                                    </div>
                                </div>
                                : item.id == selected ?
                                <div className="flex flex-col w-[32%] max-w-[500px] rounded-lg h-[260px] shadow-[0px_4px_4px_0px_rgba(0,0,0,0.25)] my-2 mx-1 border-4 border-[#0E6073] relative" key={item.id}>
                                    <Image width={400} height={400} src="/promo.jpeg" className="w-[100%] max-h-[200px] bg-center bg-cover mr-5" alt="Image de la promo sélectionnée" />
                                    <button className=" h-[40px] w-[40px] rounded-full shadow-[0px_4px_4px_0px_rgba(0,0,0,0.25)] bg-[#0E6073] absolute top-3 right-3 flex flex-row justify-center items-center" onClick={() => setSelected(0)}>
                                        <BiCheck className="text-white text-3xl"/>
                                    </button>
                                    <div className="w-full p-3 flex flex-row justify-between items-center">
                                        <p>{item.nom}</p>
                                        <button onClick={() => setOpen(item.id)}>
                                            <IoChevronDownCircle className="h-[40px] w-[40px] text-[#0E6073]" />
                                        </button>
                                    </div>
                                </div>
                                :
                                item.id == open ?
                                <div className="flex flex-col w-[32%] max-w-[500px] rounded-lg h-[520px] shadow-[0px_4px_4px_0px_rgba(0,0,0,0.25)] my-2 mx-1 relative" key={item.id}>
                                    <Image width={400} height={400} src="/promo.jpeg" className="w-[100%] max-h-[200px] bg-center bg-cover mr-5 rounded-t-lg" alt="Image de la promo sélectionnée" />
                                    <button className=" h-[40px] w-[40px] rounded-full shadow-[inset_0px_4px_4px_0px_rgba(0,0,0,0.25)] bg-white absolute top-3 right-3" onClick={() => setSelected(item.id)}></button>
                                    <div className="w-full p-3 flex flex-row justify-between items-center">
                                        <p>{item.nom}</p>
                                        <button onClick={() => setOpen(0)}>
                                            <IoChevronUpCircle className="h-[40px] w-[40px] text-[#0E6073]" />
                                        </button>
                                    </div>
                                </div>
                                :
                                <div className="flex flex-col w-[32%] max-w-[500px] rounded-lg h-[260px] shadow-[0px_4px_4px_0px_rgba(0,0,0,0.25)] my-2 mx-1 relative" key={item.id}>
                                    <Image width={400} height={400} src="/promo.jpeg" className="w-[100%] max-h-[200px] bg-center bg-cover mr-5 rounded-t-lg" alt="Image de la promo sélectionnée" />
                                    <button className=" h-[40px] w-[40px] rounded-full shadow-[inset_0px_4px_4px_0px_rgba(0,0,0,0.25)] bg-white absolute top-3 right-3" onClick={() => setSelected(item.id)}></button>
                                    <div className="w-full p-3 flex flex-row justify-between items-center">
                                        <p>{item.nom}</p>
                                        <button onClick={() => setOpen(item.id)}>
                                            <IoChevronDownCircle className="h-[40px] w-[40px] text-[#0E6073]" />
                                        </button>
                                    </div>
                                </div>
                            }
                            </>
                        )
                    })}
                </div>
                }
            </section>
            <section className="h-full w-[25%] bg-white rounded-lg overflow-auto flex flex-col items-center px-5 py-5">
                <div className="pr-[1rem] rounded-full bg-white shadow-[inset_4px_4px_12px_4px_rgba(0,0,0,0.25)] w-[70%] flex flex-row justify-between items-center mr-2">
                    <BiSearch className="text-3xl text-black ml-4" />
                    <input
                        type='text'
                        name="promoDateStart"
                        className="pr-[1rem] pl-1 py-3 w-full bg-transparent"
                        autoComplete="off"
                    />
                </div>
                {DATA.map((item) => {
                    return (
                        <span className="flex flex-row justify-between items-center w-full mt-5" key={item.id}>
                            <div className="flex flex-row items-center">
                                {<button className="flex flex-row items-center justify-center w-6 h-6 bg-[#D9D9D9] rounded-full mr-5">
                                    <p className="text-[#0E6073]">-</p>
                                </button>}
                                <Image width={200} height={200} src="/userPFP.png" className="w-12 h-12 rounded-full object-cover mr-3" alt="Photo de profil utilisateur"/>
                                <p className="text-base text-black font-semibold">{item.nom}</p>
                            </div>
                        </span>
                    )
                })}
            </section>
        </div>
        <div className="w-full h-[10%] flex flex-row justify-end px-20">
            <Link href={""} className="px-5 py-2 bg-[#0e6073] hover:bg-[#0b4d5c] text-white rounded-lg text-base self-start flex flex-row items-center justify-between w-fit">Valider la sélection <BiRightArrowAlt className="text-3xl"/></Link>
        </div>
        <NavBar />
      </main>
    </>
    );
};

export default AssignBrief;