import { type GetServerSideProps, type NextPage } from "next";
import { getSession, useSession } from "next-auth/react";
import Head from "next/head";

import { type Session as SessionAuth } from 'next-auth'

import { NavBar } from "~/components/barrel";
import dynamic from "next/dynamic";
import { useState } from "react";
import { api } from "~/utils/api";
import Router from "next/router";


const QuillNoSSRWrapper = dynamic(import('react-quill'), {
    ssr: false,
    loading: () => <p>Loading ...</p>,
})

const modules = {
    toolbar: [
        [{ header: ['1', '2', '3', false] }],
        //[{ size: [] }],
        ['bold', 'italic', 'underline', 'strike', 'blockquote', 'code'],
        [{ color: [] }],
        [
            { list: 'ordered' },
            { list: 'bullet' },
        ],
        ['link'],
    ],
    clipboard: {
        // toggle to add extra line breaks when pasting HTML:
        matchVisual: false,
    },
}


export const getServerSideProps: GetServerSideProps<{
    session: SessionAuth
}> = async function (context) {
    const session = await getSession(context)

    if (!session) {
        return {
            redirect: {
                destination: '/login',
                permanent: false,
            },
        }
    }

    return {
        props: { session }
    }
};

const AddBrief: NextPage = () => {

    const { data: sessionData } = useSession()
    const idRef = sessionData?.promo.idRef

    const createBrief = api.brief.create.useMutation()

    const [desc, setDesc] = useState("")
    const [contexte, setContexte] = useState("")
    const [modaPeda, setPeda] = useState("")
    const [evals, setEvals] = useState("")
    const [livrable, setLivrable] = useState("")
    const [perf, setPerf] = useState("")

    async function handleCrea(e: React.SyntheticEvent) {
        e.preventDefault()
        const target = e.target as typeof e.target & {
            briefTitle: { value: string };
            briefImg: { value: string };
        };
        const title = target.briefTitle.value
        const url = target.briefImg.value
        if (desc !== "" && contexte !== "" && modaPeda !== "" && evals !== "" && livrable !== "") {
            if (idRef) {
                const temp = await createBrief.mutateAsync({ title: title, desc: desc, contexte: contexte, livrable: livrable, perf: perf, idRef: idRef, eval: evals, peda: modaPeda, idForma: sessionData.user.id, img: url })
                await Router.push(`/admin/briefs/${temp.id}`)
            }
            alert("créer")
        }
        else {
            alert("Merci de remplir tous les champs requis")
        }
    }

    return (
        <>
            <Head>
                <title>Gestion de OktoBrief</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="flex min-h-screen flex-col items-center justify-start bg-[#F3F3F3] pl-[150px] px-[50px] pt-10 gap-5">

                <h1 className="text-4xl font-extrabold text-black w-full">Créer un projet : Description générel</h1>

                <section className="flex w-full flex-col items-center justify-start bg-white px-[40px] py-[40px] gap-5 rounded-xl mb-10">

                    <form onSubmit={(e) => void handleCrea(e)} className="flex w-full flex-col items-center justify-start gap-5" method="POST">
                        <fieldset className="w-full flex flex-col gap-2">
                            <label htmlFor="briefTitle" className="text-2xl text-black w-full">Titre du projet<span className="text-[#A10000]">*</span></label>
                            <input
                                type='text'
                                name="briefTitle"
                                id="briefTitle"
                                className="px-[1rem] py-3 rounded-xl bg-white shadow-[inset_0px_2px_9px_4px_rgba(0,0,0,0.25)] w-full"
                                autoComplete="off"
                                placeholder="Titre du projet"
                                required
                            />
                        </fieldset>

                        <fieldset className="w-full flex flex-col gap-2">
                            <label htmlFor="briefImg" className="text-2xl text-black w-full">Image du projet</label>
                            <input
                                type='url'
                                name="briefImg"
                                id="briefImg"
                                className="px-[1rem] py-3 rounded-xl bg-white shadow-[inset_0px_2px_9px_4px_rgba(0,0,0,0.25)] w-full"
                                autoComplete="off"
                                placeholder="Titre du projet"
                            />
                        </fieldset>

                        <fieldset className="w-full flex flex-col gap-2">
                            <h2 className="text-2xl text-black w-full">Description rapide<span className="text-[#A10000]">*</span></h2>
                            <QuillNoSSRWrapper
                                theme="snow"
                                placeholder="Description"
                                className="pb-11 bg-white w-full h-[250px]"
                                modules={modules}
                                onChange={(e) => { setDesc(e) }}
                            />
                        </fieldset>

                        <fieldset className="w-full flex flex-col gap-2">
                            <h2 className="text-2xl text-black w-full">Contexte<span className="text-[#A10000]">*</span></h2>
                            <QuillNoSSRWrapper
                                theme="snow"
                                placeholder="Contexte"
                                className="pb-11 bg-white w-full h-[250px]"
                                modules={modules}
                                onChange={(e) => { setContexte(e) }}
                            />
                        </fieldset>

                        <fieldset className="w-full flex flex-col gap-2">
                            <h2 className="text-2xl text-black w-full">Modalités pédagogiques<span className="text-[#A10000]">*</span></h2>
                            <QuillNoSSRWrapper
                                theme="snow"
                                placeholder="Modalités pédagogiques"
                                className="pb-11 bg-white w-full h-[250px]"
                                modules={modules}
                                onChange={(e) => { setPeda(e) }}
                            />
                        </fieldset>

                        <fieldset className="w-full flex flex-col gap-2">
                            <h2 className="text-2xl text-black w-full">Modalités d&apos;évaluation<span className="text-[#A10000]">*</span></h2>
                            <QuillNoSSRWrapper
                                theme="snow"
                                placeholder="Modalités d'évaluation"
                                className="pb-11 bg-white w-full h-[250px]"
                                modules={modules}
                                onChange={(e) => { setEvals(e) }}
                            />
                        </fieldset>

                        <fieldset className="w-full flex flex-col gap-2">
                            <h2 className="text-2xl text-black w-full">Livrable(s) attendu(s)<span className="text-[#A10000]">*</span></h2>
                            <QuillNoSSRWrapper
                                theme="snow"
                                placeholder="Livrable(s)"
                                className="pb-11 bg-white w-full h-[250px]"
                                modules={modules}
                                onChange={(e) => { setLivrable(e) }}
                            />
                        </fieldset>

                        <fieldset className="w-full flex flex-col gap-2">
                            <h2 className="text-2xl text-black w-full">Critères de performance</h2>
                            <QuillNoSSRWrapper
                                theme="snow"
                                placeholder="Critères de performance"
                                className="pb-11 bg-white w-full h-[250px]"
                                modules={modules}
                                onChange={(e) => { setPerf(e) }}
                            />
                        </fieldset>


                        <button type="submit" className="flex flex-row items-center justify-between px-5 py-3 bg-[#2EA3A5] hover:bg-[#288F90] text-white rounded-lg text-lg">
                            Ajouter les compétences
                        </button>

                    </form>

                </section>



                <NavBar />
                {/* {tab === "tags" &&
                    <div className="fixed w-full h-full bg-[#0E6073]/90 top-0 right-0 left-0 bottom-0 flex justify-center items-center">
                        <form className="relative flex flex-col gap-5 item-center justify-start bg-white rounded-lg p-10 w-10/12 text-[#041f25]">
                        <h1 className="text-3xl text-black">Gérer les tags</h1>
                        <div className="w-full h-full flex flex-row justify-between items-start">
                            <div className="w-[55%] h-full">
                            <div className="w-full flex flex-row justify-between min-h-[450px] h-full bg-white shadow-[0px_4px_4px_0px_rgba(0,0,0,0.25)] rounded-lg">
                                <div className="w-[40%] h-full max-h-[450px] bg-white shadow-[4px_0px_10px_0px_rgba(0,0,0,0.25)] rounded-l-lg flex flex-col items-start py-5 overflow-auto">
                                <div className="pr-5 rounded-full bg-white shadow-[inset_4px_4px_12px_4px_rgba(0,0,0,0.25)] w-[80%] flex flex-row justify-between items-center self-center mr-2 mb-3">
                                    <BiSearch className="text-3xl text-black ml-4" />
                                    <input
                                    type='text'
                                    name="searchProject"
                                    className="pr-[1rem] pl-1 py-2 w-full bg-transparent"
                                    autoComplete="off"
                                    onChange={handleSearchTerm}
                                    />
                                </div>
                                {CATEGORIES.filter((cat) => {
                                    return cat.title.toLowerCase().includes(SearchTerm.toLowerCase())
                                }).map((item) => {
                                    return (
                                    <>
                                        {selectedCat == item.id ?
                                        <button type="button" className="w-full py-2 px-5 text-start flex flex-row justify-between bg-[#2EA3A5] text-white" key={item.id} onClick={() => setSelectedCat(item.id)}>
                                            <p>{item.title}</p>
                                        </button>
                                        :
                                        <button type="button" className="w-full py-2 px-5 text-start flex flex-row justify-between" key={item.id} onClick={() => setSelectedCat(item.id)}>
                                            <p>{item.title}</p>
                                        </button>
                                        }
                                    </>
                                    )
                                })}
                                </div>
                                <div className="w-[66%] h-full flex flex-col justify-start">
                                <div className="w-full h-16 p-3 px-6 flex flex-row justify-between items-center bg-[#2EA3A5] shadow-[0px_4px_4px_0px_rgba(0,0,0,0.25)] rounded-tr-lg">
                                    <p className="text-white">{CATEGORIES[selectedCat - 1]?.title}</p>
                                    <div className="flex flex-row items-center justify-between w-16">
                                    <button type="button" onClick={() => setModifyCat(CATEGORIES[selectedCat - 1]?.id)}><BiPencil className="text-2xl text-white" /></button>
                                    <button type="button"><BiTrash className="text-2xl text-[#A10000]" /></button>
                                    </div>
                                </div>
                                <div className="w-full h-full p-3 flex flex-row flex-wrap">
                                    {CATEGORIES[selectedCat - 1]?.tags.map((item) => {
                                    return (
                                        <>
                                        {item.id == modifyTag ?
                                            <button type="button" className="py-2 px-5 mr-2 my-1 text-start rounded-full bg-[#2EA3A5] text-white" key={item.id} onClick={() => setModifyTag(item.id)}>{item.title}</button>
                                            :
                                            <button type="button" className="py-2 px-5 mr-2 my-1 text-start rounded-full bg-[#F0F0F0]" key={item.id} onClick={() => setModifyTag(item.id)}>{item.title}</button>
                                        }
                                        </>
                                    )
                                    })}
                                </div>
                                </div>
                            </div>
                            </div>
                            <div className="w-[43%]">
                            <button className=" w-full flex flex-row justify-between border-b-2 py-3" type="button" onClick={() => { creating == "tag" ? setCreating("") : setCreating("tag") }}>
                                Créer un tag
                                {creating == "tag" ? <BiChevronUp className="text-2xl" /> : <BiChevronDown className="text-2xl" />}
                            </button>
                            {creating == "tag" && modifyTag == 0 &&
                                <>
                                <div className="mt-5 flex flex-col">
                                    <fieldset>
                                    <label htmlFor='newTagTitle'>Titre du tag <span className="text-[#A10000] text-1xl">*</span></label>
                                    <input
                                        type='url'
                                        name="newTagTitle"
                                        className="p-[1rem] rounded-lg bg-none shadow-[inset_4px_5px_12px_6px_rgba(0,0,0,0.25)] w-full mb-3"
                                        autoComplete="off" />
                                    </fieldset>

                                    <span className="flex flex-row justify-between items-center">
                                    <p>Catégorie(s) du tag</p>
                                    <div className="pr-5 rounded-full bg-white shadow-[inset_4px_4px_12px_4px_rgba(0,0,0,0.25)] w-[40%] flex flex-row justify-between items-center self-center mr-2 mb-3">
                                        <BiSearch className="text-3xl text-black ml-4" />
                                        <input
                                        type='text'
                                        name="searchProject"
                                        className="pr-[1rem] pl-1 py-2 w-full bg-transparent"
                                        autoComplete="off"
                                        onChange={handleSearchTerm}
                                        />
                                    </div>
                                    </span>
                                    <div className="w-full h-full p-3 flex flex-row justify-between flex-wrap">
                                    {CATEGORIES.filter((cat) => {
                                        return cat.title.toLowerCase().includes(SearchTerm.toLowerCase())
                                    }).map((item) => {
                                        return (
                                        <>
                                            {item.id == selectedCat ?
                                            <button type="button" className="py-2 px-5 mr-2 my-1 text-start rounded-full bg-[#2EA3A5] text-white" key={item.id}>{item.title}</button>
                                            :
                                            <button type="button" className="py-2 px-5 mr-2 my-1 text-start rounded-full bg-[#F0F0F0]" key={item.id}>{item.title}</button>
                                            }
                                        </>
                                        )
                                    })}
                                    </div>
                                    <button className="bg-[#2EA3A5] hover:bg-[#288F90] text-white py-4 px-7 rounded-lg ml-10 self-end" onClick={() => { setModifyTag(0) }}>Créer</button>
                                </div>
                                </>
                            }
                            <button className=" w-full flex flex-row justify-between border-b-2 py-3" type="button" onClick={() => { creating == "cat" ? setCreating("") : setCreating("cat") }}>
                                <p>Créer une catégorie</p>
                                {creating == "cat" ? <BiChevronUp className="text-2xl" /> : <BiChevronDown className="text-2xl" />}
                            </button>
                            {creating == "cat" && modifyTag == 0 &&
                                <>
                                <div className="mt-5 flex flex-col">
                                    <fieldset>
                                    <label htmlFor='newCatTitle'>Titre de la catégorie <span className="text-[#A10000] text-1xl">*</span></label>
                                    <input
                                        type='url'
                                        name="newCatTitle"
                                        className="p-[1rem] rounded-lg bg-none shadow-[inset_4px_5px_12px_6px_rgba(0,0,0,0.25)] w-full mb-3"
                                        autoComplete="off" />
                                    </fieldset>
                                    <button className="bg-[#2EA3A5] hover:bg-[#288F90] text-white py-4 px-7 rounded-lg ml-10 self-end" onClick={() => { setModifyTag(0) }}>Créer</button>
                                </div>
                                </>
                            }
                            {CATEGORIES[selectedCat - 1]?.tags.map((item) => {
                                return (
                                <>
                                    {item.id == modifyTag && modifyCat == 0 &&
                                    <div className="mt-5 flex flex-col">
                                        <fieldset>
                                        <label htmlFor='tagUpdateTitle'>Titre du tag <span className="text-[#A10000] text-1xl">*</span></label>
                                        <input
                                            type='url'
                                            placeholder={item.title}
                                            name="tagUpdateTitle"
                                            className="p-[1rem] rounded-lg bg-none shadow-[inset_4px_5px_12px_6px_rgba(0,0,0,0.25)] w-full mb-3"
                                            autoComplete="off" />
                                        </fieldset>

                                        <span className="flex flex-row justify-between items-center">
                                        <p>Catégorie(s) du tag</p>
                                        <div className="pr-5 rounded-full bg-white shadow-[inset_4px_4px_12px_4px_rgba(0,0,0,0.25)] w-[40%] flex flex-row justify-between items-center self-center mr-2 mb-3">
                                            <BiSearch className="text-3xl text-black ml-4" />
                                            <input
                                            type='text'
                                            name="searchProject"
                                            className="pr-[1rem] pl-1 py-2 w-full bg-transparent"
                                            autoComplete="off"
                                            onChange={handleSearchTerm}
                                            />
                                        </div>
                                        </span>
                                        <div className="w-full h-full p-3 flex flex-row justify-between flex-wrap">
                                        {CATEGORIES.filter((cat) => {
                                            return cat.title.toLowerCase().includes(SearchTerm.toLowerCase())
                                        }).map((item) => {
                                            return (
                                            <>
                                                {item.id == selectedCat ?
                                                <button type="button" className="py-2 px-5 mr-2 my-1 text-start rounded-full bg-[#2EA3A5] text-white" key={item.id}>{item.title}</button>
                                                :
                                                <button type="button" className="py-2 px-5 mr-2 my-1 text-start rounded-full bg-[#F0F0F0]" key={item.id}>{item.title}</button>
                                                }
                                            </>
                                            )
                                        })}
                                        </div>
                                        <button className="bg-[#2EA3A5] hover:bg-[#288F90] text-white py-4 px-7 rounded-lg ml-10 self-end" onClick={() => { setModifyTag(0) }}>Enregistrer</button>
                                    </div>
                                    }
                                </>
                                )
                            })}
                            {CATEGORIES[selectedCat - 1]?.id == modifyCat && modifyTag == 0 &&
                                <div className="mt-5 flex flex-col">
                                <fieldset>
                                    <label htmlFor='catUpdateTitle'>Titre de la catégorie <span className="text-[#A10000] text-1xl">*</span></label>
                                    <input
                                    type='url'
                                    placeholder={CATEGORIES[selectedCat - 1]?.title}
                                    name="catUpdateTitle"
                                    className="p-[1rem] rounded-lg bg-none shadow-[inset_4px_5px_12px_6px_rgba(0,0,0,0.25)] w-full mb-3"
                                    autoComplete="off" />
                                </fieldset>
                                <button className="bg-[#2EA3A5] hover:bg-[#288F90] text-white py-4 px-7 rounded-lg ml-10 self-end" onClick={() => { setModifyCat(0) }}>Enregistrer</button>
                                </div>
                            }
                            </div>

                        </div>
                        <span className="self-end">
                            <button onClick={() => setTab("normal")} className="text-[#A10000]">Annuler</button>
                            <button className="bg-[#2EA3A5] hover:bg-[#288F90] text-white py-4 px-7 rounded-lg ml-10">Enregistrer modifications</button>
                        </span>
                        </form>
                    </div>
                    } */}
            </main>
        </>
    );
};

export default AddBrief;