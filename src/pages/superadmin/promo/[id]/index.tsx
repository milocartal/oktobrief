import type { InferGetServerSidePropsType, GetServerSideProps, NextPage } from "next";
import { getSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import { NavBar, Notifs } from "~/components/barrel";
import type { PromoWithAll } from "~/utils/type";
import { prisma } from "~/server/db";
import { BiGroup, BiCalendar, BiLeftArrowAlt, BiPencil, BiTrash, BiUserPlus } from "react-icons/bi";
import { aleatoirePP } from "~/utils/genertor";
import Link from "next/link";
import Router from "next/router";
import { api } from "~/utils/api";


export const getServerSideProps: GetServerSideProps<{
    promo: PromoWithAll
}> = async function (context) {
    const session = await getSession(context)
    const superadmin = session?.superadmin

    if (!session) {
        return {
            redirect: {
                destination: '/login',
                permanent: false,
            },
        }
    }

    if (!superadmin) {
        return {
            redirect: {
                destination: '/',
                permanent: false,
            },
        }
    }

    const promo = await prisma.promo.findUnique({
        where: {
            id: context.query.id as string
        },
        include: {
            apprenants: true,
            referentiel: true
        }
    })

    if (!promo) {
        return {
            redirect: {
                destination: '/superadmin/promo',
                permanent: false,
            },
        }
    }

    return {
        props: {
            promo: JSON.parse(JSON.stringify(promo)) as PromoWithAll
        }
    }
};

const idPromo: NextPage<InferGetServerSidePropsType<typeof getServerSideProps>> = ({ promo }) => {

    let img = "/logo-gradient.jpg"
    if (promo.image !== "") {
        img = promo.image
    }

    const deletePromo = api.promo.delete.useMutation()

    async function handleDelPromo(e: React.SyntheticEvent) {
        e.preventDefault()
        await deletePromo.mutateAsync({ id: promo.id })
        window.location.reload()
    }

    return (
        <>
            <Head>
                <title>{promo.title}</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="flex min-h-screen justify-start flex-col bg-[#F3F3F3] pl-[150px] pr-[200px] px-[50px] py-10 gap-5">
                <Link href={"/superadmin/promo"} className="px-5 py-2 bg-[#0e6073] hover:bg-[#0c4d5c] text-white rounded-lg absolute top-[40px] flex items-center justify-between gap-1"><BiLeftArrowAlt className="text-3xl" /> Retour</Link>

                <section className="flex w-full flex-col items-center justify-start bg-white px-[40px] py-[40px] gap-5 rounded-xl mt-[80px]">
                    <div id="haut" className="flex items-center w-full gap-5 justify-center">
                        <Image width={500} height={500} loader={() => img} src={img} className="w-[55%] h-[300px] h-auto object-cover mr-5 rounded-lg" alt="Image de la promo sélectionnée" />
                        <aside className="flex flex-col justify-between h-[300px] gap-3">
                            <span className="flex flex-row justify-end items-end w-full">
                                <BiUserPlus className="text-3xl text-[#0e6073] mx-2 hover:cursor-pointer" onClick={() => void Router.push(`/superadmin/promo/${promo.id}/ajouter`)} />
                                <BiPencil className="text-3xl text-[#2EA3A5] mx-2 hover:cursor-pointer" onClick={() => void Router.push(`/superadmin/promo/${promo.id}/modifier`)} />
                                <BiTrash className="text-3xl text-[#A10000] mx-2 hover:cursor-pointer" onClick={(e) => void handleDelPromo(e)} />
                            </span>
                            <h3 className="text-3xl text-black mb-2">{promo.title}</h3>
                            <button className={`w-[80%] py-4 px-4 shadow-[3px_4px_12px_0px_rgba(0,0,0,0.25)] text-center text-md rounded-lg bg-white hover:cursor-pointer`}>{promo.referentiel.title}</button>
                            <span className="flex w-full flex-row items-center justify-between">
                                <span className="flex w-full flex-row items-center">
                                    <BiGroup className="text-4xl text-[#0E6073] mr-1" />
                                    <p>{promo && promo.apprenants ? promo.apprenants.length : "0"} apprenants</p>
                                </span>
                                <span className="flex w-full flex-row items-center">
                                    <BiCalendar className="text-4xl text-[#0E6073] mr-1" />
                                    <p>Du {promo.starting.toString().slice(0, 10).replaceAll('-', '/')} au {promo.ending.toString().slice(0, 10).replaceAll('-', '/')}</p>
                                </span>
                            </span>

                        </aside>

                    </div>
                    <div id="bas" className="flex items-start w-full">
                        <aside className="w-[50%]">
                            <h3 className="text-xl text-black mb-2">Description</h3>
                            <div dangerouslySetInnerHTML={{ __html: promo.description }} />
                        </aside>
                        <aside className="grid grid-cols-2 w-[50%]">
                            {promo.apprenants.length > 0 && promo.apprenants.map((item) => {
                                let pp = aleatoirePP()
                                if (item.image !== "" && item.image !== null) {
                                    pp = item.image
                                }
                                return (
                                    <Link href={`/superadmin/users/${item.id}`} className="flex flex-row justify-start items-center w-full mt-5" key={item.id}>
                                        <Image width={300} height={300} loader={() => pp} src={pp} className="w-12 h-12 rounded-full object-cover mr-3" alt="Photo de profil utilisateur" />
                                        <p className="text-sm text-black">{item.firstName} {item.name}</p>
                                    </Link>
                                )
                            })}
                        </aside>

                    </div>
                </section>


                <Notifs />
                <NavBar />
            </main>
        </>
    );
};

export default idPromo;