// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Assignation {
    idBrief String
    brief   Brief    @relation(fields: [idBrief], references: [id], onDelete: Cascade)
    idUser  String
    user    User     @relation(fields: [idUser], references: [id], onDelete: Cascade)
    ending  DateTime
    rendu   Boolean

    @@unique([idBrief, idUser])
}

model Brief {
    id           String        @id @default(cuid())
    desc         String
    idR          String
    contexte     String // @db.Text
    modal_peda   String // @db.Text
    modal_eval   String // @db.Text
    livrable     String
    perf         String
    referentiel  Referentiel   @relation(fields: [idR], references: [id], onDelete: Cascade)
    assignations Assignation[]
}

model Promo {
    id          String      @id @default(cuid())
    title       String
    description String
    idRef       String
    starting    DateTime
    ending      DateTime
    apprenants  User[]
    referentiel Referentiel @relation(fields: [idRef], references: [id], onDelete: Cascade)
}

model Referentiel {
    id          String       @id @default(cuid())
    title       String
    competences Competence[]
    promos      Promo[]
    brief       Brief[]
}

model Competence {
    id          String      @id @default(cuid())
    title       String
    idR         String
    referentiel Referentiel @relation(fields: [idR], references: [id], onDelete: Cascade)
    niveaux     Niveau[]
}

model Niveau {
    id         String     @id @default(cuid())
    title      String
    idC        String
    competence Competence @relation(fields: [idC], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    formateur     Boolean
    superadmin    Boolean
    accounts      Account[]
    sessions      Session[]
    promos        Promo[]
    assignations  Assignation[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
