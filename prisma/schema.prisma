// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Conversation {
    id           String    @id @default(cuid())
    idApprenants String    @unique
    Apprenant    User      @relation(fields: [idApprenants], references: [id], onDelete: Cascade)
    Messages     Message[]
}

model Message {
    id             String       @id @default(cuid())
    Conversation   Conversation @relation(fields: [idConversation], references: [id], onDelete: Cascade)
    idConversation String
}

model Ressource {
    id     String  @id @default(cuid())
    title  String
    link   String
    img    String
    briefs Brief[]
    tags   Tag[]
}

model Categorie {
    id   String @id @default(cuid())
    name String
    tags Tag[]
}

model Tag {
    id         String      @id @default(cuid())
    name       String
    briefs     Brief[]
    categories Categorie[]
    Ressources Ressource[]
}

model Assignation {
    idBrief String
    brief   Brief    @relation(fields: [idBrief], references: [id], onDelete: Cascade)
    idUser  String
    user    User     @relation(fields: [idUser], references: [id], onDelete: Cascade)
    idPromo String
    promo   Promo    @relation(fields: [idPromo], references: [id], onDelete: Cascade)
    ending  DateTime
    rendu   Boolean  @default(false)

    @@unique([idBrief, idUser, idPromo])
}

model Brief {
    id           String        @id @default(cuid())
    title        String
    desc         String
    idR          String
    contexte     String // @db.Text
    modal_peda   String // @db.Text
    modal_eval   String // @db.Text
    livrable     String
    perf         String
    img          String?
    referentiel  Referentiel   @relation(fields: [idR], references: [id], onDelete: Cascade)
    assignations Assignation[]
    tags         Tag[]
    ressources   Ressource[]
    Niveaux      Niveau[]
    idFormateur  String
    formateur    User          @relation(fields: [idFormateur], references: [id])
}

model Promo {
    id          String        @id @default(cuid())
    title       String
    description String
    idRef       String
    starting    DateTime
    ending      DateTime
    createAT    DateTime      @default(now())
    image       String
    active      Boolean       @default(true)
    apprenants  User[]
    referentiel Referentiel   @relation(fields: [idRef], references: [id], onDelete: Cascade)
    Assignation Assignation[]
    Session     Session[]
}

model Referentiel {
    id          String       @id @default(cuid())
    title       String
    competences Competence[]
    promos      Promo[]
    brief       Brief[]
}

model Competence {
    id          String      @id @default(cuid())
    title       String
    idR         String
    referentiel Referentiel @relation(fields: [idR], references: [id], onDelete: Cascade)
    niveaux     Niveau[]
}

model Niveau {
    id         String     @id @default(cuid())
    title      String
    idC        String
    todo       String
    eval       String
    competence Competence @relation(fields: [idC], references: [id], onDelete: Cascade)
    Briefs     Brief[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    promo        Promo?   @relation(fields: [promoId], references: [id])
    promoId      String?
}

model User {
    id            String         @id @default(cuid())
    name          String?
    firstName     String?
    email         String?        @unique
    emailVerified DateTime?
    image         String
    formateur     Boolean        @default(false)
    superadmin    Boolean        @default(false)
    password      String?
    accounts      Account[]
    sessions      Session[]
    promos        Promo[]
    assignations  Assignation[]
    briefsCrees   Brief[]
    Conversation  Conversation[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
